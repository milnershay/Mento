{"version":3,"sources":["calculatePosition.ts"],"names":["getCss","getOffset","getPosition","getScrollLeft","getScrollTop","ownerDocument","getComputedStyle","AXIS","top","bottom","left","right","FLIPPED_DIRECTION","CROSS_AXIS","AXIS_SIZE","PARSED_PLACEMENT_CACHE","visualViewport","window","getContainerDimensions","containerNode","width","height","scroll","tagName","document","documentElement","clientWidth","clientHeight","getScroll","node","scrollTop","scrollLeft","scrollWidth","scrollHeight","getDelta","axis","offset","size","containerDimensions","padding","containerScroll","containerHeight","startEdgeOffset","endEdgeOffset","Math","max","getMargins","style","parseInt","marginTop","marginBottom","marginLeft","marginRight","parsePlacement","input","placement","crossPlacement","split","crossAxis","crossSize","computePosition","childOffset","boundaryDimensions","overlaySize","placementInfo","crossOffset","containerOffsetWithBoundary","isContainerPositioned","position","minViablePosition","maxViablePosition","min","floor","getMaxHeight","margins","getAvailableSpace","calculatePositionInternal","placementInput","scrollSize","flip","shouldOverlapWithTrigger","normalizedOffset","space","flippedPlacementInfo","flippedPosition","flippedSpace","delta","maxHeight","arrowPosition","arrowOffsetLeft","arrowOffsetTop","calculatePosition","opts","targetNode","overlayNode","scrollNode","shouldFlip","boundaryElement","container","offsetParent","body","isBodyContainer","containerPositionStyle","matrix","getPropertyValue","transform","regex","matches","match","scaleX","scaleY","parseFloat","Number","isFinite"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Axis,\n  Placement,\n  PlacementAxis,\n  SizeAxis,\n} from '@react-types/overlays';\nimport getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\n\ninterface Position {\n  top?: number;\n  left?: number;\n  bottom?: number;\n  right?: number;\n}\n\ninterface Dimensions {\n  width: number;\n  height: number;\n  top: number;\n  left: number;\n  scroll: Position;\n}\n\ninterface ParsedPlacement {\n  placement: PlacementAxis;\n  crossPlacement: PlacementAxis;\n  axis: Axis;\n  crossAxis: Axis;\n  size: SizeAxis;\n  crossSize: SizeAxis;\n}\n\ninterface Offset {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n\ninterface PositionOpts {\n  placement: Placement;\n  targetNode: HTMLElement;\n  overlayNode: HTMLElement;\n  scrollNode: HTMLElement;\n  padding: number;\n  shouldFlip: boolean;\n  boundaryElement: HTMLElement;\n  offset: number;\n  crossOffset: number;\n  shouldOverlapWithTrigger: boolean;\n}\n\nexport interface PositionResult {\n  position?: Position;\n  arrowOffsetLeft?: number;\n  arrowOffsetTop?: number;\n  maxHeight?: number;\n  placement: PlacementAxis;\n}\n\nconst AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left',\n};\n\nconst FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left',\n};\n\nconst CROSS_AXIS = {\n  top: 'left',\n  left: 'top',\n};\n\nconst AXIS_SIZE = {\n  top: 'height',\n  left: 'width',\n};\n\nconst PARSED_PLACEMENT_CACHE = {};\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\nfunction getContainerDimensions(containerNode: Element): Dimensions {\n  let width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  let scroll: Position = {};\n\n  if (containerNode.tagName === 'BODY') {\n    width = visualViewport?.width ?? document.documentElement.clientWidth;\n    height = visualViewport?.height ?? document.documentElement.clientHeight;\n\n    scroll.top =\n      getScrollTop(ownerDocument(containerNode).documentElement) ||\n      getScrollTop(containerNode);\n    scroll.left =\n      getScrollLeft(ownerDocument(containerNode).documentElement) ||\n      getScrollLeft(containerNode);\n  } else {\n    ({ width, height, top, left } = getOffset(containerNode));\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n\n  return { width, height, scroll, top, left };\n}\n\nfunction getScroll(node: HTMLElement): Offset {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight,\n  };\n}\n\nfunction getDelta(\n  axis: Axis,\n  offset: number,\n  size: number,\n  containerDimensions: Dimensions,\n  padding: number\n) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[AXIS_SIZE[axis]];\n\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\n\nfunction getMargins(node: HTMLElement): Position {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0,\n  };\n}\n\nfunction parsePlacement(input: Placement): ParsedPlacement {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n\n  let [placement, crossPlacement] = input.split(' ');\n  let axis: Axis = AXIS[placement] || 'right';\n  let crossAxis: Axis = CROSS_AXIS[axis];\n\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n\n  let size = AXIS_SIZE[axis];\n  let crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction computePosition(\n  childOffset: Offset,\n  boundaryDimensions: Dimensions,\n  overlaySize: Offset,\n  placementInfo: ParsedPlacement,\n  offset: number,\n  crossOffset: number,\n  containerOffsetWithBoundary: Offset,\n  isContainerPositioned: boolean\n) {\n  let {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  } = placementInfo;\n  let position: Position = {};\n\n  // button position\n  position[crossAxis] = childOffset[crossAxis];\n\n  if (crossPlacement === 'center') {\n    //  + (button size / 2) - (overlay size / 2)\n    // at this point the overlay center should match the button center\n    position[crossAxis] +=\n      (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    //  + (button size) - (overlay size)\n    // at this point the overlay bottom should match the button bottom\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  } /* else {\n    the overlay top should match the button top\n  } */\n  // add the crossOffset from props\n  position[crossAxis] += crossOffset;\n\n  // this is button center position - the overlay size + half of the button to align bottom of overlay with button center\n  let minViablePosition =\n    childOffset[crossAxis] +\n    childOffset[crossSize] / 2 -\n    overlaySize[crossSize];\n  // this is button position of center, aligns top of overlay with button center\n  let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;\n\n  // clamp it into the range of the min/max positions\n  position[crossAxis] = Math.min(\n    Math.max(minViablePosition, position[crossAxis]),\n    maxViablePosition\n  );\n\n  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.\n  if (placement === axis) {\n    // If the container is positioned (non-static), then we use the container's actual\n    // height, as `bottom` will be relative to this height.  But if the container is static,\n    // then it can only be the `document.body`, and `bottom` will be relative to _its_\n    // container, which should be as large as boundaryDimensions.\n    const containerHeight = isContainerPositioned\n      ? containerOffsetWithBoundary[size]\n      : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(\n      containerHeight - childOffset[axis] + offset\n    );\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n\n  return position;\n}\n\nfunction getMaxHeight(\n  position: Position,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number\n) {\n  return position.top != null\n    ? // We want the distance between the top of the overlay to the bottom of the boundary\n      Math.max(\n        0,\n        boundaryDimensions.height +\n          boundaryDimensions.top +\n          boundaryDimensions.scroll.top - // this is the bottom of the boundary\n          (containerOffsetWithBoundary.top + position.top) - // this is the top of the overlay\n          (margins.top + margins.bottom + padding) // save additional space for margin and padding\n      )\n    : // We want the distance between the top of the trigger to the top of the boundary\n      Math.max(\n        0,\n        childOffset.top +\n          containerOffsetWithBoundary.top - // this is the top of the trigger\n          (boundaryDimensions.top + boundaryDimensions.scroll.top) - // this is the top of the boundary\n          (margins.top + margins.bottom + padding) // save additional space for margin and padding\n      );\n}\n\nfunction getAvailableSpace(\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number,\n  placementInfo: ParsedPlacement\n) {\n  let { placement, axis, size } = placementInfo;\n  if (placement === axis) {\n    return Math.max(\n      0,\n      childOffset[axis] -\n        boundaryDimensions[axis] -\n        boundaryDimensions.scroll[axis] +\n        containerOffsetWithBoundary[axis] -\n        margins[axis] -\n        margins[FLIPPED_DIRECTION[axis]] -\n        padding\n    );\n  }\n\n  return Math.max(\n    0,\n    boundaryDimensions[size] +\n      boundaryDimensions[axis] +\n      boundaryDimensions.scroll[axis] -\n      containerOffsetWithBoundary[axis] -\n      childOffset[axis] -\n      childOffset[size] -\n      margins[axis] -\n      margins[FLIPPED_DIRECTION[axis]] -\n      padding\n  );\n}\n\nexport function calculatePositionInternal(\n  placementInput: Placement,\n  childOffset: Offset,\n  overlaySize: Offset,\n  scrollSize: Offset,\n  margins: Position,\n  padding: number,\n  flip: boolean,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  offset: number,\n  crossOffset: number,\n  isContainerPositioned: boolean,\n  shouldOverlapWithTrigger: boolean\n): PositionResult {\n  let placementInfo = parsePlacement(placementInput);\n  let {\n    size,\n    crossAxis,\n    crossSize,\n    placement,\n    crossPlacement,\n    axis,\n  } = placementInfo;\n  let position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    offset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n\n  let normalizedOffset = offset;\n  let space = getAvailableSpace(\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding + offset,\n    placementInfo\n  );\n\n  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = parsePlacement(\n      `${FLIPPED_DIRECTION[placement]} ${crossPlacement}` as Placement\n    );\n    let flippedPosition = computePosition(\n      childOffset,\n      boundaryDimensions,\n      overlaySize,\n      flippedPlacementInfo,\n      offset,\n      crossOffset,\n      containerOffsetWithBoundary,\n      isContainerPositioned\n    );\n    let flippedSpace = getAvailableSpace(\n      boundaryDimensions,\n      containerOffsetWithBoundary,\n      childOffset,\n      margins,\n      padding + offset,\n      flippedPlacementInfo\n    );\n\n    // If the available space for the flipped position is greater than the original available space, flip.\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n\n  let delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let maxHeight = getMaxHeight(\n    position,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding\n  );\n\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n\n  position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    normalizedOffset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n  delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let arrowPosition: Position = {};\n  arrowPosition[crossAxis] =\n    childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] =\n      position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement,\n  };\n}\n\n/**\n * Determines where to place the overlay with regards to the target and the position of an optional indicator.\n */\nexport function calculatePosition(opts: PositionOpts): PositionResult {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    shouldOverlapWithTrigger,\n  } = opts;\n\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === 'BODY';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned =\n    !!containerPositionStyle && containerPositionStyle !== 'static';\n  let childOffset: Offset = isBodyContainer\n    ? getOffset(targetNode)\n    : getPosition(targetNode, container);\n\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n\n  let overlaySize: Offset = getOffset(overlayNode);\n  const matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  const transform = matrix;\n  const regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  const matches = transform.match(regex);\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n\n  let margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n\n  let scrollSize = getScroll(scrollNode);\n  let boundaryDimensions = getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary: Offset =\n    boundaryElement.tagName === 'BODY'\n      ? getOffset(container)\n      : getPosition(container, boundaryElement);\n\n  return calculatePositionInternal(\n    placement,\n    childOffset,\n    overlaySize,\n    scrollSize,\n    margins,\n    padding,\n    shouldFlip,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    offset,\n    crossOffset,\n    isContainerPositioned,\n    shouldOverlapWithTrigger\n  );\n}\n"]}